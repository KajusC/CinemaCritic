@using CinemaCritic.Web.Handlers
@using CinemaCritic.Web.Models
@using CinemaCritic.Web.Services
@using CinemaCritic.Web.Services.Contracts
@using CinemaCritic.Models.Dto

@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt
@inject IAuthenticationService AuthStateServices
@inject JwtAuthenticationService JwtAuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService _localStorageService
@inject HttpClient HttpClient
@inject UserService UserService


@page "/profile"

<div class="signup-box">
    <h1>Edit Profile</h1>
    <EditForm Model="@userModel" OnSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

    
        <label for="username" class="input-label">Username:</label>
        <input type="text" id="username" class="input-field" placeholder=@Username @bind="Username" />

        <label for="email" class="input-label">Email:</label>
        <input type="email" id="email" class="input-field" placeholder=@Email @bind="Email" />

        <label for="firstName" class="input-label">First Name:</label>
        <input type="text" id="firstName" class="input-field" placeholder=@FirstName @bind="FirstName" />

        <label for="lastName" class="input-label">Last Name:</label>
        <input type="text" id="lastName" class="input-field" placeholder=@LastName @bind="LastName" />

        <label for="reviewCount" class="input-label">Review Count:</label>
        <input type="text" id="reviewCount" value="10" readonly />

        <div>
            <a href="/changepassword" class="change-password">Want to change password?</a>
        </div>


        <button type="submit" class="submit">Change 👨‍🦽👨‍🦽</button>
    </EditForm>


    @if (showPopup)
    {
        <div class="popup submit">
            <div class="popup-content">
                <h2>@ErrorMessage</h2>
                <p>@ErrorMessageFooter</p>
                <button @onclick="ClosePopup">Close</button>
            </div>
        </div>
    }
</div>


@code {
    string token = string.Empty;

    private UserDto userModel = new UserDto();

    protected string ErrorMessage = "";
    protected string ErrorMessageFooter = "";

    private string Username { get; set; }
    private string Email { get; set; }
    private string FirstName { get; set; }
    private string LastName { get; set; }
    private string HashedPassword { get; set; }
    private int userId;

    protected override async Task OnInitializedAsync()
    {
        var tokens = await _localStorageService.GetItem<string>("token");
        if (!string.IsNullOrEmpty(tokens))
        {
            token = tokens;
        }
        userId = GetUserId();

        var User = await UserService.GetUser(userId);

        Console.WriteLine($"IserP: {User.Password}");

        Username = User.Username;
        Email = User.Email;
        FirstName = User.FirstName;
        LastName = User.LastName;
        HashedPassword = User.Password;

    }
    public int GetUserId()
    {
        var handler = new JwtSecurityTokenHandler();
        try
        {
            var token = handler.ReadJwtToken(this.token);
            var userId = token.Claims.First(claim => claim.Type == "jti").Value;
            return int.Parse(userId);
        }
        catch (Exception)
        {
            return 0;
        }
    }

    private async Task HandleSubmit()
    {
        userModel.Id = this.userId;
        userModel.Username = this.Username;
        userModel.Email = this.Email;
        userModel.FirstName = this.FirstName;
        userModel.LastName = this.LastName;
        userModel.Password = HashedPassword;
        try
        {
            Console.WriteLine("Edited");
            await UserService.UpdateUser(userId, userModel);
            ErrorMessage = "Profile updated!";
            ErrorMessageFooter = "🤓🤓🤓";
            showPopup = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed");
            ErrorMessage = "Failed";
            ErrorMessageFooter = "Please try again later.";
            showPopup = true;
        }
        
    }
    private bool showPopup;


    private void ClosePopup()
    {
        showPopup = false;
    }

}
